name: Restore Database

on:
  workflow_dispatch: 
    inputs: 
      env:
        description: Environment
        type: environment
        default: development
      db:
        description: Database Name
        type: string
        default: three
      date:
        description: Point in Time (YYYY-MM-DD)
        type: string
        default: ''

permissions:
  contents: read
  checks: write

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs: 
      environments: ${{ steps.configure-matrix.outputs.environments }}
    steps:
      - id: configure-matrix
        name: Configure Environment Matrix
        run: |
          #Backed up DBs on schedule: DEV and PROD
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            ENVIRONMENTS=$(jq -cn '["development", "production"]')
          else
            ENVIRONMENTS=$(jq -cn '["${{ github.event.inputs.env }}"]') 
          fi
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
  back-up:
    runs-on: ubuntu-latest
    needs: configure
    if: contains(fromJSON('["development", "production"]'), github.event.inputs.env) #Backups only taken for DEV and PROD
    environment: ${{ github.event.inputs.env }}
    steps:
      - id: get_runner_publicip
        name: Get Runner's IP
        run: |
          # DBs are locked by a whitelist. To get the backup file, dinamically whitelisting the runner's ip is needed
          PUBLIC_IP=$(curl https://ifconfig.me/ip)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
      
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - id: open_db_firewall
        name: Add IP to whitelist
        run: |
          #Add the public Ip of the runner to the whitelist.
          az postgres flexible-server firewall-rule create \
          --resource-group ${{vars.resource_group}} \
          --name ${{ vars.server_name }} \
          --rule-name "GH_Runner_IP" \
          --start-ip-address ${{ steps.get_runner_publicip.outputs.public_ip }} \
          --end-ip-address ${{ steps.get_runner_publicip.outputs.public_ip }}

      - id: update_pg_dump
        name: Upgade pg_dump
        run: |
          #The PostgreSQL client version must be equal to or greater than the database server version to ensure compatibility.
          # Get the installed PostgreSQL client version (major version only)
          INSTALLED_VERSION=$(psql --version 2>/dev/null | awk '{print $3}' | cut -d '.' -f1)
          # Compare the installed version with the minimum required version
          if [[ -n "$INSTALLED_VERSION" && "$INSTALLED_VERSION" -ge "15" ]]; then
              echo "PostgreSQL client version $INSTALLED_VERSION is already installed (>=15). No update required."
              exit 0
          else
              echo "Updating PostgreSQL client to the latest version..."
              
              sudo apt-get -y remove postgresql-client-common
              sudo apt-get -y install postgresql-common
              yes "" | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
              sudo apt-get -y update
              sudo apt-get -y upgrade
              sudo apt-get -y install postgresql-client
              echo "PostgreSQL client has been updated to the latest version."
          fi

      - id: get_backup_name
        name: Get Backup Name
        run: |
            #Using creation time of the blob file. If there are multiple files created the same day, the latest is picked.
            BACKUP_FILE_NAME=$(az storage blob list --auth-mode login -c "backup" --account-name "${{ vars.storage_account }}" --query "reverse(sort_by([?contains(properties.creationTime, '${{ github.event.inputs.date }}')], &properties.creationTime))[0].name")

            if [[ -n "$BACKUP_FILE_NAME" ]]; then
                echo "Using $BACKUP_FILE_NAME as the backup file"
                echo "backup_file_name=$BACKUP_FILE_NAME" >> GITHUB_OUTPUT
            else
                echo "Database backup file not found"; exit 1
            fi

      - id: back_up_db
        name: Back up Database
        env:
          PGPASSWORD: ${{ secrets.pg_password }} #pg_dump does not allow inline passwords
          DB_NAME: ${{ github.event.inputs.db }}
        run: |            
            NEW_DB_NAME="${DB_NAME}_new" 
            OLD_DB_NAME="${DB_NAME}_old"
            
            #Create a new DB
            createdb $NEW_DB_NAME -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}}
            
            # Verify the configuration
            if [ $? -eq 0 ]; then
              echo "Configuration completed successfully"
            else
              echo "Configuration failed"
              exit 1
            fi
            
            # Restore the DB
            az storage blob download \
                --account-name ${{ vars.storage_account }} \
                --container-name backup \
                --name ${{ steps.get_backup_name.outputs.backup_file_name }} \
                --auth-mode login \
                --file - \
            | psql $NEW_DB_NAME -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}}
            
            # Verify the backup
            if [ $? -eq 0 ]; then
              echo "Restore completed successfully"
            else
              echo "Restore failed"; exit 1
            fi
            
            # Terminate all active connections to the old database
            psql -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}} -d postgres -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$DB_NAME' AND pid <> pg_backend_pid();"
            
            #Rename old DB 
            psql -d postgres -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}} -c "ALTER DATABASE $DB_NAME RENAME TO $OLD_DB_NAME;"
            echo "Old Database renamed to $OLD_DB_NAME"
            
            # Terminate all active connections to the new database
            psql -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}} -d postgres -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$NEW_DB_NAME' AND pid <> pg_backend_pid();"
            
            #Rename new DB
            psql -d postgres -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}} -c "ALTER DATABASE $NEW_DB_NAME RENAME TO $DB_NAME;"
            echo "New Database renamed to $DB_NAME"
          
      - id: close_db_firewall
        name: Remove Ip from whitelist
        run: |
        
          az postgres flexible-server firewall-rule delete \
          --resource-group "${{vars.resource_group}}" \
          --name "${{vars.server_name}}" \
          --rule-name "GH_Runner_IP" \
          --yes
