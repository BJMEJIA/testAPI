name: Back up Database

on:
  workflow_dispatch: 
    inputs: 
      env:
        description: Environment
        type: environment
        default: development

permissions:
  contents: read
  checks: write

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs: 
      environments: ${{ steps.configure-matrix.outputs.environments }}
    steps:
      - id: configure-matrix
        name: Configure Environment Matrix
        run: |
          #Backed up DBs on schedule: DEV and PROD
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            ENVIRONMENTS=$(jq -cn '["development", "production"]')
          else
            ENVIRONMENTS=$(jq -cn '["${{ github.event.inputs.env }}"]')
          fi

          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  back-up:
    runs-on: ubuntu-latest
    needs: configure
    strategy:
      matrix:
        env: ${{ fromJson(needs.configure.outputs.environments) }}
    environment: ${{ matrix.env }}
    steps:
      - id: get_runner_publicip
        name: Get Runner's IP
        run: |
          # DBs are locked by a whitelist. To get the backup file, dinamically whitelisting the runner's ip is needed
          PUBLIC_IP=$(curl https://ifconfig.me/ip)

          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
      
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - id: open_db_firewall
        name: Add IP to whitelist
        run: |
          #Add the public Ip of the runner to the whitelist.

          az postgres flexible-server firewall-rule create \
          --resource-group ${{vars.resource_group}} \
          --server-name ${{ vars.server_name }} \
          --rule-name "GH_Runner_IP" \
          --start-ip-address ${{ steps.get_runner_publicip.outputs.public_ip }} \
          --end-ip-address ${{ steps.get_runner_publicip.outputs.public_ip }}

      - id: update_pg_dump
        name: Upgade pg_dump
        run: |
          #The postgres version of the client must the same or higher than the one running on the DB. (As of now, version 15)

          # Get the installed PostgreSQL client version (major version only)
          INSTALLED_VERSION=$(psql --version 2>/dev/null | awk '{print $3}' | cut -d '.' -f1)

          # Set the minimum required version
          MIN_VERSION=15

          # Compare the installed version with the minimum required version
          if [[ -n "$INSTALLED_VERSION" && "$INSTALLED_VERSION" -ge "$min_version" ]]; then
              echo "PostgreSQL client version $INSTALLED_VERSION is already installed (>=15). No update required."
              exit 0
          else
              echo "Updating PostgreSQL client to the latest version..."
              
              sudo apt-get -y remove postgresql-client-common

              sudo apt-get -y install postgresql-common

              yes "" | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh

              sudo apt-get -y update
              sudo apt-get -y upgrade

              sudo apt-get -y install postgresql-client

              echo "PostgreSQL client has been updated to the latest version."
          fi

      - id: back_up_db
        name: Back up Database
        run: |
          # Generate a timestamp
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")

          # Construct the backup file name with timestamp
          BACKUP_FILE_NAME="${{ vars.db_name }}_backup_${TIMESTAMP}.sql"

          # Export the PostgreSQL password to avoid being prompted
          export PGPASSWORD=${{ secrets.pg_password }}

          # PostgreSQL Backup Command
          pg_dump -h ${{ vars.pg_host }} -p 5432 -U ${{ secrets.pg_user}} -d ${{ vars.db_name }} | azcopy copy "https://${{ vars.storage_account }}.blob.core.windows.net/backup/$BACKUP_FILE_NAME" --from-to PipeBlob


          # Verify the backup
          if [ $? -eq 0 ]; then
            echo "Backup completed successfully"
          else
            echo "Backup failed"
          fi

          # Unset the PostgreSQL password
          unset PGPASSWORD

      - id: close_db_firewall
        name: Remove Ip from whitelist
        run: |
          az postgres flexible-server firewall-rule delete \
          --resource-group "${{vars.resource_group}}" \
          --server-name "${{vars.server_name}}" \
          --name "GH_Runner_IP"
