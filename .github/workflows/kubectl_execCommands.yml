name: Exec commands on Pods

on:
  workflow_dispatch:
    inputs:
      env:
        type: environment
        description: Environment
        required: true
        default: 'development'
      command:
        type: string
        description: command
        required: true
        default: "help"
      app:
        type: choice
        description: "Application"
        required: true
        options:
          - "Celery"
          - "Web"
          - "Flower"
        default: "web"

permissions:
  contents: read
  checks: write

jobs:
  configure:
    if: contains(fromJSON('["development", "qa", "training"]'), github.event.inputs.env)
    runs-on: ubuntu-latest
    outputs:
      RESOURCE_NAME: ${{ steps.configure-environment.outputs.app_name }}
      RESOURCE_GROUP: ${{ steps.configure-environment.outputs.rg }}
    steps:
      - id: configure-environment
        name: Configure environment
        run: |
          RESOURCE_NAMES_MAP='{
            "Web": "api",
            "Celery": "celery",
            "Flower": "celery-flower",
          }'
          
          ENVIRONMENTS_MAP='{
            "development": "dev",
            "qa": "qa",
            "training": "training",
            "production": "prod"
          }'
          
          ENVIRONMENT="$(echo $ENVIRONMENTS_MAP | jq -r .[\"${{ github.event.inputs.env }}\"])"
          APPLICATION="$(echo $RESOURCE_NAMES_MAP | jq -r .[\"${{ github.event.inputs.app }}\"])"
          
          RESOURCE_NAME="$ENVIRONMENT-$APPLICATION"
          RESOURCE_GROUP="agent-portal-$ENVIRONMENT-container-apps"
          
          echo "RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "Selected resource: $RESOURCE_NAME; RG: $RESOURCE_GROUP"
          
  exec_cluster:
    #TODO: Deprecate this job when Production is managed by Terraform.
    if: contains(fromJSON('["production"]'), github.event.inputs.env)
    runs-on: ubuntu-latest
    needs: configure
    environment: ${{ github.event.inputs.env }}
    permissions:
      id-token: write
      contents: read
      checks: write
    env:
      CLUSTER_NAME: S0C-Prod-K8s
      RESOURCE_GROUP: SOC-ProdNC-RG
      NAMESPACE: socotra
    steps:
      - name: Configure
        id: configure
        run: |
          DEPLOYMENT_NAME_MAP='{
            "Web": "three-backend-insurance",
            "Celery": "three-backend-celery",
            "Flower": "three-backend-flower",
          }'

          DEPLOYMENT_NAME="$(echo $DEPLOYMENT_NAMES_MAP | jq -r .[\"${{ github.event.inputs.app }}\"])"

          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Prepare Agent
        run: |
          #install kubectl and kubelogin
          sudo az aks install-cli

          #Prepare KubeConfig
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

          #Use Kubelogin for authentication
          kubelogin convert-kubeconfig -l azurecli
          
      - name: Exec command on Pod
        run: |
          kubectl exec -ti deployment/${{ steps.configure.outputs.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} -- /bin/bash -c "python manage.py ${{ github.event.inputs.command }}"

  exec_container_app:
    runs-on: windows-latest
    needs: configure
    environment: ${{ github.event.inputs.env }}
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      - name: Exec command on Container App
        run: |
          az containerapp exec -n ${{ needs.configure.outputs.RESOURCE_NAME }} -g ${{ needs.configure.outputs.RESOURCE_GROUP }} --command "python manage.py ${{ github.event.inputs.command }}"
